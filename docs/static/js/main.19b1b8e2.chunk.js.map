{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GridTern.js","components/GrifGid.js","gifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifsFetch","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GridTern","className","src","alt","GrifGid","setImages","useEffect","then","AgifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"qMAEaA,EAAc,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,cAAoB,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAiB7C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC/BR,GAAgB,SAAAS,GAAI,OAAMP,GAAN,mBAAsBO,OAC1CN,EAAc,MAKd,SACI,uBACQO,KAAK,OAAOC,MAAOT,EAAYU,SAjB5B,SAACP,GAChBF,EAAcE,EAAEQ,OAAOF,a,+BCJlBG,EAAY,uCAAI,WAAQC,GAAR,uBAAAC,EAAA,6DACnBC,EADmB,iDAC8BC,UAAYH,GAD1C,+DAEDI,MAAQF,GAFP,cAEnBG,EAFmB,gBAIFA,EAAUC,OAJR,uBAIjBC,EAJiB,EAIjBA,KAEFC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAalBM,GAbkB,4CAAJ,sDCAZO,EAAW,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAC9B,OACI,sBAAKc,UAAU,OAAf,UACG,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCDEO,EAAW,SAAC,GAAiB,IAAfnB,EAAc,EAAdA,SAAc,EAETd,mBAAS,IAFA,mBAE9B2B,EAF8B,KAEtBO,EAFsB,KAWrC,OARAC,qBAAW,WACPtB,EAAeC,GACVsB,KAAOF,KACb,CAAEpB,IAOT,qCACQ,6BAAMA,IACN,qBAAKgB,UAAU,YAAf,SAIgBH,EAAOJ,KAAM,SAAAC,GAAG,OAEZ,cAAC,EAAD,eAEKA,GADEA,EAAIC,aCKxBY,EA5BS,WAAM,MAGYrC,mBAAS,CAAC,eAHtB,mBAGlBsC,EAHkB,KAGNvC,EAHM,KAW1B,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEQuC,EAAWf,KAAK,SAAAT,GAEhB,OAAO,cAAC,EAAD,CAA4BA,SAAaA,GAAxBA,YCjBtCyB,G,MAAUC,SAASC,cAAc,UAGvCC,IAASC,OAAO,cAAE,EAAF,IAAoBJ,K","file":"static/js/main.19b1b8e2.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport const AddCategory = ({setCategories }) => {\r\n\r\n    const [inputValue, setinputValue] = useState('')\r\n    const handleText = (e) =>{\r\n        setinputValue(e.target.value);\r\n\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();    \r\n        //console.log('hecho')\r\n        if (inputValue.trim().length > 2 ){\r\n        setCategories ( cats => [ inputValue , ...cats ]);\r\n        setinputValue('');\r\n        }\r\n    \r\n    }\r\n    return (\r\n        <form onSubmit={ handleSubmit}>  \r\n            <input \r\n                    type=\"text\" value={inputValue} onChange={handleText}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\r\n    setCategories: PropTypes.func.isRequired\r\n    \r\n}","\r\n\r\nexport const getGifsFetch =  async ( category ) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI ( category ) }&limit=10&api_key=NvILVPnDS8iB8ZJPvqJnnThgJf9ehAqH`;\r\n    const respuesta = await fetch ( url );\r\n\r\n    const { data } = await respuesta.json();\r\n    //console.log(data);\r\n    const gifs = data.map  (img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GridTern = ({ title, url}) => {\r\n    return (\r\n        <div className=\"card\">\r\n           <img src={ url } alt={ title } />\r\n           <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport React, {useEffect, useState} from 'react'\r\nimport { getGifsFetch } from '../helpers/GetGifs';\r\nimport { GridTern } from './GridTern';\r\n\r\nexport const GrifGid =  ({ category}) => {\r\n\r\n    const [images, setImages] = useState([])\r\n    useEffect (()=>{\r\n        getGifsFetch ( category )\r\n            .then ( setImages );\r\n    }, [ category ])\r\n\r\n\r\n\r\n   // getGifsFetch();\r\n    return (\r\n\r\n<>\r\n        <h3>{ category }</h3>\r\n        <div className=\"card-grid\">\r\n            \r\n           \r\n                    {\r\n                        images.map ( img => (\r\n                       \r\n                            <GridTern\r\n                            key = {img.id}\r\n                            {... img } />\r\n                        ))\r\n                    }\r\n            \r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GrifGid } from './components/GrifGid';\r\n\r\n  const AgifExpertApp = () => {\r\n\r\n   // const categorias = ['El Padrino', 'Scarface', 'AmericaX'];\r\n    const [ categories, setCategories ] = useState(['El Padrino']);  \r\n    \r\n    //const setAdd = ()=>{\r\n      //  setCategories([... categories, 'Hunter'])\r\n   // }\r\n\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <h2>Gif expertos</h2>\r\n            <hr />\r\n            <AddCategory setCategories={ setCategories } />\r\n            <ul>\r\n                {\r\n                    categories.map (category  =>{\r\n\r\n                    return <GrifGid key = { category } category = { category} />\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AgifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport  AgifExpertApp  from './gifExpertApp';\nimport './index.css'\n\n\n\nconst divRoot = document.querySelector('#root');\n\n\nReactDOM.render(< AgifExpertApp />, divRoot); // siempre tiene que empezar con mayusculas los componentes\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n"],"sourceRoot":""}